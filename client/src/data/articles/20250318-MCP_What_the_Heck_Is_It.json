{
  "title": "MCP: What the Heck Is It?",
  "url": "https://medium.com/@kenji-onisuka/mcp-what-the-heck-is-it-78122e0d02aa",
  "author": "Kenji",
  "publish_date": "Mar 18, 2025",
  "read_time": "4 min read",
  "claps": 11,
  "comments": 0,
  "content": "Márcio Siqueira\n highlighted\n\nMember-only story\n\nMCP: What the Heck Is It?\n\nA Simple Guide to How AI Models Use MCP to Connect with Real-World Tools\n\nKenji\n\n11\n\nE\nverybody is talking about MCP lately. It’s popping up everywhere — Twitter, tech podcasts, even casual conversations. I’ve previously shared two detailed overviews of MCP (Model Context Protocol), but today, I want to break it down from the jargon.\n\nYou're in the right place if you’re non-technical but curious about MCP and its relevance.\n\nWhat Exactly is MCP?\n\nAt its simplest, MCP (Model Context Protocol) is a standard, a common language designed to help AI models communicate easily with external tools and services. Imagine trying to have conversations in multiple languages without a translator. It’s doable, but it’s complicated, messy, and exhausting.\n\nMCP acts like that universal translator, enabling AI models to integrate and interact with various tools smoothly and without extra hassle.\n\nWhy Should We Care?\n\nSimple Example: Scrabble Scoring with MCP\n\nLet’s look at a not-so-practical example but a fun one. Below is a snippet from a server.py file that hosts a tool for calculating Scrabble scores. Here’s how it works:\n\nWhen you type something like Calculate the Scrabble score of ‘pineapple’ the AI communicates through MCP to our server. The tool processes the request and seamlessly returns the total Scrabble score.\n\n# server.py\n\nfrom mcp.server.fastmcp import FastMCP\nimport time\nimport signal\nimport sys\n\ndef signal_handler(sig, frame):\n    print(\"Shutting down server gracefully...\")\n    sys.exit(0)\n\nsignal.signal(signal.SIGINT, signal_handler)\n\n# Scrabble letter-value map\nscrabble_scores = {\n    'a': 1, 'b': 3, 'c': 3, 'd': 2, 'e': 1, 'f': 4, 'g': 2,\n    'h': 4, 'i': 1, 'j': 8, 'k': 5, 'l': 1, 'm': 3, 'n': 1,\n    'o': 1, 'p': 3, 'q': 10, 'r': 1, 's': 1, 't': 1, 'u': 1,\n    'v': 4, 'w': 4, 'x': 8, 'y': 4, 'z': 10\n}\n\n# Create the MCP server\nmcp = FastMCP(\n    name=\\\"scrabble-scorer\\\",\n    host=\\\"127.0.0.1\\\",\n    port=8080,\n    timeout=30\n)\n\n@mcp.tool()\ndef scrabble_scorer(word: str) -> int:\n    \\\"\\\"\\\"Calculate the Scrabble score for a word.\\\"\\\"\\\"\n    try:\n        if not isinstance(word, str):\n            return 0\n        return sum(scrabble_scores.get(char.lower(), 0) for char in word)\n    except Exception:\n        return 0\n\nif __name__ == \\\"__main__\\\":\n    try:\n        print(\\\"Starting Scrabble scoring server on 127.0.0.1:8080\\\")\n        mcp.run()\n    except Exception as e:\n        print(f\\\"Error: {e}\\\")\n        time.sleep(5)\n\nClaude Desktop Configuration\n\nHere’s an example of how you might configure Claude Desktop to recognize your MCP server:\n\n{\n  \"mcpServers\": {\n    \"scrabble_scorer\": {\n      \"command\": \"python\",\n      \"args\": [\n        \"{LOCATION TO SERVER.py file}\"\n      ],\n      \"host\": \"127.0.0.1\",\n      \"port\": 8080,\n      \"timeout\": 15000\n    }\n  }\n}\n\nWith this setup, Claude Desktop will know exactly where your MCP server is and how to connect to it.\n\nWhat’s the Big Deal?\n\nYou know how messy it can get if you’ve tried to hook multiple services to an AI system. Each tool has its quirks, and a single change can break the entire chain. MCP standardizes these interactions so your AI remains reliable without you needing to rewrite code constantly.\n\nIt’s a straightforward step toward making AI more capable and practical. MCP paves the way for smarter AI assistants by reducing friction for developers. Sure, we’re still a way off from having an all-powerful “Jarvis,” but protocols like MCP move us closer to AI that can tackle meaningful tasks in daily life.\n\nStay curious, watch these developments, and be ready to dive in when the moment is right.",
  "scraped_at": "2025-04-07 08:24:25"
}