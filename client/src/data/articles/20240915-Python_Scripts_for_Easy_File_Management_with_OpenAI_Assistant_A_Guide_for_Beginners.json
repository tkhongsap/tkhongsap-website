{
  "title": "Python Scripts for Easy File Management with OpenAI Assistant: A Guide for Beginners",
  "url": "https://medium.com/@kenji-onisuka/python-scripts-for-easy-file-management-with-openai-assistant-a-guide-for-beginners-37cf16f99c8b",
  "author": "Kenji",
  "publish_date": "Sep 15, 2024",
  "read_time": "4 min read",
  "claps": 2,
  "comments": 0,
  "content": "Python Scripts for Easy File Management with OpenAI Assistant: A Guide for Beginners\n\nAutomate file uploads and deletions using Python to simplify your workflow with OpenAI’s Assistant API.\n\nKenji\n\n2\n\nI started using OpenAI’s Assistant API in 2023, when it was first released. Even in its early stages, I found it incredibly useful for building AI-powered assistants for both personal and work projects. From an idea to a proof of concept (POC) or even a complete application, the Assistant API can help you move from concept to execution within days — if not hours.\n\nHowever, managing a large number of files with the Assistant API can be difficult. When I first started using it and integrating files into a vector store, I found uploading and deleting files through the interface inefficient. I wish I had known earlier how to automate this process using Python.\n\nIn this article, I’ll share the Python scripts I use to batch remove and upload files. These scripts will help you save time and make your workflow more efficient.\n\nPython Code for Batch File Management\n\nHere’s the Python code I use to batch remove and upload files in the Assistant. Whether you’re managing a few files or thousands, this script can simplify the process and reduce the chance of mistakes.\n\n# This program interacts with the OpenAI API to list and delete files. \n# It retrieves the API key from environment variables and uses it to \n# authenticate requests to the OpenAI file management endpoints.\n\nimport os\nimport requests\n# import openai\nfrom dotenv import load_dotenv\n\n# Load environment variables from .env file\nload_dotenv()\n\n# Initialize OpenAI API client with API key from environment variables\nopenai_api_key = os.getenv('OPENAI_API_KEY')\n\nheaders = {\n    \"Authorization\": f\"Bearer {openai_api_key}\"\n}\n\ndef list_files(purpose=None):\n    try:\n        url = \"https://api.openai.com/v1/files\"\n        if purpose:\n            url += f\"?purpose={purpose}\"\n        \n        response = requests.get(url, headers=headers)\n        response.raise_for_status()  # Raises an HTTPError if the HTTP request returned an unsuccessful status code\n\n        files = response.json()[\"data\"]\n        return files\n\n    except Exception as e:\n        print(f\"An error occurred while listing the files: {str(e)}\")\n        return []\n\ndef delete_file(file_id):\n    try:\n        url = f\"https://api.openai.com/v1/files/{file_id}\"\n        response = requests.delete(url, headers=headers)\n        response.raise_for_status()\n\n        # Check if the deletion was successful\n        if response.json().get(\"deleted\", False):\n            print(f\"File with ID {file_id} was successfully deleted.\")\n        else:\n            print(f\"Failed to delete the file with ID {file_id}.\")\n\n    except Exception as e:\n        print(f\"An error occurred while trying to delete the file: {str(e)}\")\n\n# Example usage:\n# 1. List files associated with a specific purpose (e.g., \"vector-store\" if you have that as a purpose)\nfiles = list_files()\n\n# 2. Perform deletion operation on each file\nfor file in files:\n    # Add logic here if you want to filter by filename, creation date, etc.\n    print(f\"Deleting file: {file['filename']} (ID: {file['id']})\")\n    delete_file(file['id'])\n\nThis script helps you delete files from OpenAI’s API by using file IDs, which you can adjust as needed.\n\n# This script uploads markdown files from the 'docs' directory to OpenAI's API and creates a file batch in a vector store.\n# It first retrieves markdown files, uploads them, and then associates them with a vector store batch for further processing.\n\nimport os\nimport requests\nfrom dotenv import load_dotenv\n\n# Load environment variables from .env file\nload_dotenv()\n\n# Initialize OpenAI API client with API key from environment variables\nopenai_api_key = os.getenv('OPENAI_API_KEY')\n\n# Constants\nOPENAI_API_KEY = openai_api_key\nVECTOR_STORE_ID = \"place your vector store id here\"\nUPLOAD_URL = \"https://api.openai.com/v1/files\"\nBATCH_URL = f\"https://api.openai.com/v1/vector_stores/{VECTOR_STORE_ID}/file_batches\"\n\n# Headers for API requests\nHEADERS = {\n    \"Authorization\": f\"Bearer {OPENAI_API_KEY}\",\n    \"Content-Type\": \"application/json\",\n    \"OpenAI-Beta\": \"assistants=v2\"\n}\n\ndef get_markdown_files_from_docs():\n    # Get all markdown files from the 'docs' directory\n    docs_dir = os.path.join(os.getcwd(), 'docs')\n    file_paths = [os.path.join(docs_dir, f) for f in os.listdir(docs_dir) if f.endswith('.md')]\n    return file_paths\n\ndef upload_files_to_openai(file_paths):\n    file_ids = []\n    for file_path in file_paths:\n        filename = os.path.basename(file_path)  # Extract just the filename\n        with open(file_path, 'rb') as f:\n            response = requests.post(\n                UPLOAD_URL,\n                headers={\n                    \"Authorization\": f\"Bearer {OPENAI_API_KEY}\",\n                },\n                files={\n                    'file': (filename, f, 'text/markdown')\n                },\n                data={\n                    'purpose': 'user_data'  # Change this if another purpose fits better\n                }\n            )\n            if response.status_code == 200:\n                file_id = response.json()['id']\n                file_ids.append(file_id)\n                print(f\"Uploaded {filename} successfully, file_id: {file_id}\")\n            else:\n                print(f\"Failed to upload {filename}: {response.text}\")\n    return file_ids\n\ndef create_vector_store_file_batch(file_ids):\n    data = {\n        \"file_ids\": file_ids,\n        # Optional: \"chunking_strategy\": {\"type\": \"auto\"}\n    }\n    response = requests.post(\n        BATCH_URL,\n        headers=HEADERS,\n        json=data\n    )\n    if response.status_code == 200:\n        batch_id = response.json()['id']\n        print(f\"Vector store file batch created successfully, batch_id: {batch_id}\")\n    else:\n        print(f\"Failed to create vector store file batch: {response.text}\")\n\ndef main():\n    # Step 1: Get markdown files from the 'docs' directory\n    file_paths = get_markdown_files_from_docs()\n\n    # Step 2: Upload files to OpenAI\n    file_ids = upload_files_to_openai(file_paths)\n\n    # Step 3: Create a vector store file batch\n    if file_ids:\n        create_vector_store_file_batch(file_ids)\n\nif __name__ == \"__main__\":\n    main()\n\nhis script uploads markdown files to OpenAI’s API and creates a batch in the vector store.\n\nI hope this helps\n\nFor beginners, automating file management with the Assistant API can save a lot of time. Instead of manually uploading or deleting files, these scripts allow you to handle them in bulk, so you can focus on more important tasks.\n\nConclusion\n\nAutomating file management with the OpenAI Assistant API has saved me a lot of time. I wish I had started doing this earlier. I’ve also automated other tasks like handling images and downloading files generated by the assistant, which I’ll share in future posts. Keep an eye out for more tips to make your workflow more efficient.\n\nIf you’re unfamiliar with the OpenAI Assistant API, I encourage you to explore the documentation. It’s a powerful tool that can significantly accelerate your development process.",
  "scraped_at": "2025-04-07 08:27:11"
}