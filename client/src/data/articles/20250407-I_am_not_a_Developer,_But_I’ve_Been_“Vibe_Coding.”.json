{
  "title": "I am not a Developer, But I’ve Been “Vibe Coding.”",
  "url": "https://medium.com/ai-unscripted/i-am-not-a-developer-but-ive-been-vibe-coding-765d13ced348",
  "author": "Kenji",
  "publish_date": null,
  "read_time": "3 min read",
  "claps": 50,
  "comments": 1,
  "content": "Zion\n highlighted\n\n1\n\nZion\n highlighted\n\nZion\n highlighted\n\nZion\n highlighted\n\nMember-only story\n\nFeatured\n\nI am not a Developer, But I’ve Been “Vibe Coding.”\n\nHere’s What I’ve Learned — it struggles in the middle\n\nKenji\n\nAI Unscripted\n\n50\n\n1\n\nF\nirst things first: I’m not a professional developer or coder. My background is in math — I know enough to build small apps and maybe integrate some APIs, but I’m nowhere near deploying enterprise software.\n\nLately, I’ve produced more code than ever. But is it good? That is for another story, thanks to something I like to call “vibe coding.”\n\nIf you have heard or are wondering what “vibe coding” even means, it’s pretty simple: describe your idea, let generative AI sketch it out, tweak a bit here and there, and keep iterating until you get what you want.\n\nDoes it sound a bit messy? Sure. Is it effective? Surprisingly, yes.\n\nWell, at least in the beginning, and definitely toward the end.\nBut right in the middle is when it gets tricky.\n\nWhy It Works (At Least Initially)\n\nAt the start of a project, there are decisions to make. What language? Which framework? How should the project structure look? AI can take that pressure off by quickly giving us something — anything — to start from.\n\nWithin minutes, there’s a working prototype. It’s rough, sure. But rough is fine. It gets me moving, and I start seeing possibilities instead of roadblocks.\n\nThe Middle: Where Everything Slows Down\n\nHere’s where things start getting complicated. After the initial excitement fades, the complexity creeps in.\n\nSuddenly, AI isn’t helping as much anymore. Instead, it’s rewriting functions that already worked or creating new code instead of fixing what’s already there.\n\nPrompts get misunderstood. Bugs multiply.\n\nThis middle stage is the hardest for vibe coders like me because it requires careful design decisions, which AI does not excel at without clear guidance.\n\nAt this point, the “vibes” fade, and I’m left holding a messy, half-built codebase.\n\nNearing the Finish Line: AI Finds Its Groove Again\n\nAfter I put in the work — cleaning up the logic, setting a clear structure, and writing tests, now it’s working. Suddenly, it can effortlessly generate similar components, add features, write tests, and produce documentation.\n\nAt this stage, my “AI partner” becomes genuinely helpful, and I feel productive again.\n\nPractical Advice from My Vibe Coding Journey\n\nAfter spending a lot of late nights building and breaking projects, here’s what I’ve found works best:\n\nIs Vibe Coding “Real” Coding? My Final Thoughts\n\nMy honest answer: it depends on your goals.\n\nIf you aim to learn quickly, test new ideas, and have fun, vibe coding is fantastic.\n\nBut if you plan to maintain and scale your app, eventually you’ll need real structure, testing, and planning — things AI still can’t fully handle on its own.\n\nAnd if you’re sitting there thinking, “I wish I knew enough to code something cool,” vibe coding could change that for you.\n\nIt won’t magically make you a senior engineer, but it’ll get you building faster and experimenting more freely. You’ll ship real things. You’ll hit roadblocks. And yes — you’ll still learn a lot the hard way.\n\nBut you’ll be building. And that alone makes it worth it.",
  "scraped_at": "2025-04-07 08:39:10"
}