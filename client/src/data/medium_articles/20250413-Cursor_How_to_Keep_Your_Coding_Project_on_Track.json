{
  "title": "Cursor: How to Keep Your Coding Project on Track",
  "url": "https://medium.com/ai-unscripted/cursor-how-to-keep-your-coding-project-on-track-75911d30dfb5",
  "author": "Kenji",
  "publish_date": null,
  "read_time": "5 min read",
  "claps": 0,
  "comments": 0,
  "cover_image_url": "https://miro.medium.com/v2/resize:fit:700/0*zv10sxIMWyhVKbBD",
  "content": "Member-only story\n\nCursor: How to Keep Your Coding Project on Track\n\nMinimize confusion and prevent feature conflicts\n\nKenji\n\nAI Unscripted\n\nYou're not alone if you’ve ever watched your AI-coded project veer off course from a single small request. This simple approach will help you keep your AI coding agent in check and ensure that your project runs smoothly.\n\nIf you use an AI-powered code editor to learn how to code or build a small project, you might have noticed it sometimes mixes up your tasks. It might even change a feature you’ve already finished or skip the actual request you made.\n\nTo avoid this issue, create a clear Project Rule explaining how the AI should interact with your work. In addition, a dedicated task management system should be set up so the AI can mark its progress as it completes different features.\n\nI found a helpful tip in this video:\n\nWhy Bother with Task Management?\n\nImagine this scenario: you ask Cursor to add a minor feature, and suddenly the structure of your code changes in unexpected ways. Most of the time, the AI isn’t aware of some essential detail, like a missing dependency or an unfinished step. A centralized plan keeps Cursor up to speed on what’s done and what still needs attention.\n\nExample Cursor Rule (task-list.mdc)\n\n# Task List Management\n\nGuidelines for creating and managing task lists to track project progress for the **OCR Document Extraction Application** (deployed on Replit).\n\n## Creating Task Lists\n\n1. **Use Markdown Files**  \n   - Create one or more `.md` files (e.g., `TASKS.md`, `FEATURE_TASKS.md`) in your project root or a dedicated `docs/` folder.  \n   - Name the files descriptively based on each phase or feature set (e.g., `OCR_TASKS.md`, `UI_TASKS.md`).\n\n2. **Recommended Structure Within Each Task File**\n\n   ```markdown\n   # [Feature or Project Phase Name]\n\n   A brief description of the purpose and overall goal of the tasks in this file.\n\n   ## Completed Tasks\n   - [x] Brief description of tasks already finished  \n     (e.g., “Initialized Node.js/React project on Replit,” “Set up MongoDB schema for Document model.”)\n\n   ## In Progress Tasks\n   - [ ] Brief description of tasks currently being worked on  \n     (e.g., “Implement file upload endpoint with Multer,” “Connect to OpenAI Vision API and parse responses.”)\n\n   ## Upcoming Tasks\n   - [ ] Brief description of tasks to do next  \n     (e.g., “Set up the review page for extracted OCR data,” “Add error handling for low-confidence handwriting.”)\n\nMy TASKS.md for a Personal Website Rebuild\n\n# Personal Website Rebuild: Feature Tasks\n\nA concise list of tasks to guide development of a revamped personal website.\n\n---\n\n## 1. Setup & Project Structure\n- [x] **Initialize Repository**  \n  - Create a new Git repository or set up a local dev environment.  \n  - Add essential scripts for building and serving the site.\n\n- [x] **Basic Folder Organization**  \n  - Separate front-end and back-end code (if applicable).  \n  - Configure any required environment variables or local settings.\n\n- [x] **Dependencies & Configuration**  \n  - Install front-end libraries (e.g., React, Vue, or vanilla JS).  \n  - Update `README.md` with project goals and setup instructions.\n\n---\n\n## 2. Frontend UI & Navigation\n- [ ] **Overall Layout**  \n  - Create a clean, responsive layout with a header and footer.  \n  - Set up a consistent design style (typography, colors).\n\n- [ ] **Home Page / Landing**  \n  - Introduce a hero section explaining the purpose of the site.  \n  - Showcase key links or features (e.g., blog, newsletter sign-up, portfolio).\n\n- [ ] **Global Navigation**  \n  - Implement a menu or navbar for quick access to main pages.  \n  - Optimize for mobile (hamburger menu or similar).\n\n---\n\n## 3. Content Management\n- [ ] **CMS or Manual Content**  \n  - Decide whether to integrate a CMS (e.g., Contentful, Ghost) or manage static files manually.  \n  - Set up content structures (articles, projects, or pages).\n\n- [ ] **Blog or Writing Section**  \n  - Implement a template for blog posts or articles.  \n  - Allow easy creation and editing of new posts (if using a CMS).\n\n- [ ] **About Me Page**  \n  - Craft an engaging bio section.  \n  - Include an overview of experience or notable projects.\n\n---\n\n## 4. Newsletter & Subscriber Feature\n- [ ] **Subscription Form**  \n  - Add an email field and submission button.  \n  - Provide feedback on successful/failed submissions.\n\n- [ ] **Backend Integration (if needed)**  \n  - Connect form to a service or API for storing emails.  \n  - Validate addresses and handle confirmation flows.\n\n---\n\n## 5. SEO & Analytics\n- [ ] **Meta Tags & Descriptions**  \n  - Optimize titles and descriptions for search engines.  \n  - Include Open Graph tags for social media previews.\n\n- [ ] **Sitemap Generation**  \n  - Automatically or manually generate a sitemap.xml for search indexing.  \n  - Update this whenever new pages are added.\n\n- [ ] **Analytics Setup**  \n  - Integrate a platform (e.g., Google Analytics or Plausible) to track site traffic.  \n  - Comply with relevant data protection guidelines.\n\n---\n\n## 6. Testing & QA\n- [ ] **Basic Unit Testing**  \n  - Test critical components like the subscription form, routing, and rendering.  \n  - Use a testing library suited to your framework (e.g., React Testing Library, Jest).\n\n- [ ] **Cross-Browser Checks**  \n  - Ensure functionality and styling work correctly in all major browsers.  \n  - Address any mobile layout issues or feature discrepancies.\n\n- [ ] **Performance Tests**  \n  - Optimize for fast page loads (minimize large images, enable caching).  \n  - Use Lighthouse or a similar tool to identify potential improvements.\n\n---\n\n## 7. Future Enhancements (Placeholder)\n- [ ] **Authentication & Account System**  \n  - Let users create profiles or manage personal data.\n\n- [ ] **Portfolio & Projects Section**  \n  - Showcase detailed case studies or interactive demos.\n\n- [ ] **Comments or Community Interaction**  \n  - Allow visitors to comment on posts or join a mailing list forum.\n\n- [ ] **Monetization Options**  \n  - Explore sponsorships, affiliate links, or e-commerce integrations.\n\n---\n\n**Note**: Move tasks between “in progress,” “completed,” and “upcoming” as you make progress. This document should be updated frequently to keep your personal website rebuild on track.\n\nMy Experience\n\nWhen I provided Cursor with this clear roadmap, it stayed focused. It also saved me from chasing down random issues and allowed me to concentrate on building content.\n\nWriting out your tasks and pairing that list with a simple Cursor rule keeps the project flowing more smoothly. Next time you work with Cursor, try this method — you might be surprised by how much it helps.",
  "scraped_at": "2025-04-13 09:26:54"
}