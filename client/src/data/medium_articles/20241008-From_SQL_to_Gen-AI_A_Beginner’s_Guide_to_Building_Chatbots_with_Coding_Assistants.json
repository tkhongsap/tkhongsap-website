{
  "title": "From SQL to Gen-AI: A Beginnerâ€™s Guide to Building Chatbots with Coding Assistants",
  "url": "https://medium.com/@kenji-onisuka/from-sql-to-gen-ai-a-beginners-guide-to-building-chatbots-with-coding-assistants-7dc4a422c03a",
  "author": "Kenji",
  "publish_date": "Oct 8, 2024",
  "read_time": "5 min read",
  "claps": 20,
  "comments": 0,
  "cover_image_url": "https://miro.medium.com/v2/resize:fit:700/0*OFWVWYEmQCv2TIeu",
  "content": "Member-only story\n\nFrom SQL to Gen-AI: A Beginnerâ€™s Guide to Building Chatbots with Coding Assistants\n\nLearn how to elevate your coding skills with AI-powered tools, step by step.\n\nKenji\n\n20\n\nT\nhe best way to learn isnâ€™t to consume information but to build something fun while you tinker about it. My friendâ€™s journey from SQL to AI proves this.\n\nRecently, a friend reached out, eager to expand beyond SQL. His curiosity wasnâ€™t just about coding â€” it was about understanding the current wave of technology, and, hopefully, he can utilize it. I realized then: the desire to grow is the first step towards mastery.\n\nThe Weekend Project\n\nI suggested he start with a weekend project to make the learning process both practical and enjoyable. The project? Building a Retrieval-Augmented Generation (RAG) system and chatbot capable of interacting with documents or books. This not only introduces AI but also makes coding fun and hands-on. Why a weekend project?\n\nStep-by-Step Guidance for Beginners\n\nI shared several resources to help him kickstart his journey and broke the project into manageable steps. Hereâ€™s a simplified version of what I shared:\n\nChatGPT - Code Assistant\n\nA versatile tool that helps developers improve their code quality, security, and performance across multipleâ€¦\n\nchatgpt.com\n\nCursor\n\nThe AI Code Editor\n\nwww.cursor.com\n\nGitHub - tkhongsap/openai-chatbot-assistant: a template for openai chatbot assistant api\n\na template for openai chatbot assistant api. Contribute to tkhongsap/openai-chatbot-assistant development by creatingâ€¦\n\ngithub.com\n\nI also guided him on key parts of the project:\n\n# utils/openai_utils.py\n\nimport openai\nimport time\nimport streamlit as st\n\nfrom openai import OpenAI\n\napi_key = st.secrets[\"OPENAI_API_KEY\"]\nclient = OpenAI(api_key=api_key)\n\n# function: wait on the run to complete\ndef wait_on_run(run, thread_id):\n    while run.status == 'queued' or run.status == 'in_progress':\n        run = client.beta.threads.runs.retrieve(thread_id=thread_id, run_id=run.id)\n        # time.sleep(4)\n        # print(run.status)\n\n# function: display the response\ndef display_thread_messages(messages):\n    message_texts = []\n    for thread_message in messages.data[::-1]:\n        # Append the message content to the list\n        message_texts.append(thread_message.content[0].text.value)\n    # Join the list into a single string separated by newlines\n    return \"\\n\\n\".join(message_texts)\n\ndef generate_response(user_message, assistant_id):\n    if 'thread_id' not in st.session_state:\n        # initiate a new thread if one does not exist in session state\n        thread = client.beta.threads.create()\n        st.session_state['thread_id'] = thread.id\n        print(f\"New thread created: {thread.id}\")\n    else:\n        print(f\"Using existing thread: {st.session_state['thread_id']}\")\n    thread_id = st.session_state['thread_id']\n\n    try:\n        # add user_message to the thread\n        message = client.beta.threads.messages.create(\n            thread_id=thread_id,\n            role='user',\n            content=user_message)\n\n        # run a thread using required assistant\n        run = client.beta.threads.runs.create(\n            thread_id=thread_id,\n            assistant_id=assistant_id)\n\n        with st.spinner(\"Generating answer...\"):\n            wait_on_run(run, thread_id)\n\n        messages = client.beta.threads.messages.list(\n            thread_id=thread_id,\n            order='asc',\n            after=message.id)\n\n        return display_thread_messages(messages)\n    except Exception as e:\n        st.error(f\"An error occurred: {str(e)}\")\n        return \"Error generating response. Please try again.\"\n\nFocus on the app-streamlit.py file: This is the core of the chatbot project, responsible for running the app smoothly.\n\n# app-streamlit.py\nimport streamlit as st\nimport openai\nimport warnings\nimport base64\nfrom openai import OpenAI\nfrom utils.custom_css_main_page import get_main_custom_css\nfrom utils.custom_css_banner import get_social_news_banner\nfrom utils.openai_utils import generate_response\nfrom utils.message_utils import format_message, message_func  # Import the utility functions\nfrom PIL import Image\n\n# Ignore all deprecation warnings\nwarnings.filterwarnings(\"ignore\", category=DeprecationWarning)\n\n# Initialize OpenAI client\nclient = OpenAI(api_key=st.secrets[\"OPENAI_API_KEY\"])\n\n# Set assistant id\nassistant_id = \"asst_xxxxx\"\n\n# Set page config\nst.set_page_config(\n    page_title=\"ðŸ’¬ Your AI-Powered Assistant\",\n    page_icon=\"ðŸ“º\",\n    layout=\"wide\"\n)\n\n# Load and display social news banner\ndef load_social_news_banner():\n    return get_social_news_banner()\n\nst.markdown(load_social_news_banner(), unsafe_allow_html=True)\n\n# Load and display main custom CSS\ndef load_main_custom_css():\n    return get_main_custom_css()\n\nst.markdown(load_main_custom_css(), unsafe_allow_html=True)\n\n# Sidebar initialization success message\nst.sidebar.success(\"OpenAI client initialized successfully.\")\n\n\nwarnings.filterwarnings(\"ignore\")\nchat_history = []\n\n# Model selection radio button\nmodel = st.radio(\n    \"Choose a model:\",  # Provide a meaningful label\n    options=[\"GPT-4o\"],\n    index=0,\n    horizontal=True,\n    label_visibility=\"collapsed\"  # Optional: hide the label if not needed\n)\nst.session_state[\"model\"] = model\n\n# Load icons for user and assistant\ndef get_image_base64(image_path):\n    with open(image_path, \"rb\") as image_file:\n        encoded_string = base64.b64encode(image_file.read()).decode()\n    return f\"data:image/png;base64,{encoded_string}\"\n\n# Load icons for user and assistant\nuser_icon_path = \"image/user_icon.jpg\"\nassistant_icon_path = \"image/assistant_icon.jpg\"\n\nuser_icon_base64 = get_image_base64(user_icon_path)\nassistant_icon_base64 = get_image_base64(assistant_icon_path)\n\n# Initialize session state for messages\nif \"messages\" not in st.session_state:\n    st.session_state[\"messages\"] = [\n        {\"role\": \"assistant\", \"content\": \"Meet your AI-Powered Assistant for today! ðŸ“ŠðŸ’¼\"}\n    ]\n\n# Display chat messages\nfor message in st.session_state[\"messages\"]:\n    is_user = message[\"role\"] == \"user\"\n    message_func(message[\"content\"], user_icon_base64, assistant_icon_base64, is_user=is_user, model=model)\n\n# Accept user input and generate a response\nprompt = st.chat_input(\"Your message\")\nif prompt:\n    st.session_state[\"messages\"].append({\"role\": \"user\", \"content\": prompt})\n    message_func(prompt, user_icon_base64, assistant_icon_base64, is_user=True, model=model)\n\n    response = generate_response(prompt, assistant_id)\n    st.session_state[\"messages\"].append({\"role\": \"assistant\", \"content\": response})\n    message_func(response, user_icon_base64, assistant_icon_base64, model=model)\n\nThe chatbot is built with Streamlit, a Python framework that simplifies the process of building web apps. Itâ€™s ideal for beginners who want something functional with minimal setup. The chatbot uses OpenAIâ€™s API for smooth, secure interactions, and includes simple customizations to make it look visually appealing.\n\nWhy Use AI-Powered Coding Assistants?\n\nAI-powered coding assistants are not just tools; theyâ€™re copilots. They debug, suggest, and accelerate. For beginners, they flatten the learning curve, allowing creativity to flourish where frustration once lived.\n\nIf youâ€™re moving beyond SQL or starting from scratch with coding, a project like this RAG-based chatbot is an excellent way to introduce yourself to AI development. With the ability to interact with your own documents, it feels personal and practical. Plus, having tools like Cursor AI or ChatGPT alongside you makes the experience smoother and more enjoyable.",
  "scraped_at": "2025-04-07 09:07:09"
}