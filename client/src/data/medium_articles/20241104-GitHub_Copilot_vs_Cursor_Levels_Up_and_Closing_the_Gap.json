{
  "title": "GitHub Copilot vs Cursor: Levels Up and Closing the Gap",
  "url": "https://medium.com/@kenji-onisuka/github-copilot-vs-cursor-levels-up-and-closing-the-gap-1307bdea0af7",
  "author": "Kenji",
  "publish_date": "Nov 4, 2024",
  "read_time": "2 min read",
  "claps": 89,
  "comments": 1,
  "cover_image_url": "https://miro.medium.com/v2/resize:fit:700/0*bNyHzyZRjXTfoOhP",
  "content": "Evelyn Taylor\n highlighted\n\nMember-only story\n\nGitHub Copilot vs Cursor: Levels Up and Closing the Gap\n\nMulti-File Editing and Model Flexibility Mark Major Advances\n\nKenji\n\n89\n\n1\n\nGitHub has its sights set on a future with one billion users, but is Copilot’s latest update enough to make it the go-to coding assistant for everyone?\n\nLast week’s GitHub Universe 2024 had some exciting updates. Naturally, I had to see if its latest updates could rival Cursor. I use both of these products, don’t ask me why, but lately, I have been using Cursor more and more.\n\nSpoiler: Copilot has made significant progress, but there’s still some catching up to do with Cursor AI.\n\nSpoiler: Copilot has made significant progress, but there’s still some catching up to do with Cursor AI.\n\nWhat’s Fresh and Impressive?\n\nThe most noticeable update for me is the new chat interface. It’s been moved to the right panel, making interactions smoother and more intuitive. No complaints here — I love having the chat on the right; it just feels so much more user-friendly.\n\nNext up is multi-file editing. This long-awaited feature means we can finally make changes across multiple files within a project. Cursor AI has had this for a while, so I’m glad GitHub Copilot has caught up. Competition is good for us as consumers, after all.\n\nAnd lastly, before this update, we were limited to a single model (I think it was GPT-4o, but I’m not entirely sure). Now, GitHub has introduced multi-model support, offering options like Claude 3.5 Sonnet (Preview), GPT-4o, o1-mini (Preview), and o1-preview (Preview). This added flexibility lets developers customize Copilot based on their needs and coding style.\n\nMy Experience Using the Updates\n\nI’ve spent the weekend working on and messing around my weekend project, writing code, and debugging via GitHub Copilot. I have to admit, Copilot is much better.\n\nIt’s sharper, and the new functionalities are genuinely helpful. However, Cursor still outshines Copilot in intuitive files and codebase referencing areas.\n\nCursor’s approach feels smoother and easier to navigate when dealing with complex projects. So, I dont’ think I will be completely switch over to Copilot just yet.\n\nLooking Forward\n\nThe overall direction GitHub is taking points to a promising future. The goal is clear: making coding more accessible while continuing to enhance the developer experience.\n\nSo, while Copilot hasn’t fully surpassed Cursor, it’s clear that the gap is closing. It’s an exciting time to be part of this evolving landscape, and I’m eager to see where it goes next.",
  "scraped_at": "2025-04-07 09:08:14"
}