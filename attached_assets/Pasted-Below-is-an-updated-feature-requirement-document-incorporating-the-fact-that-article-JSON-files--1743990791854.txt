Below is an **updated feature requirement document** incorporating the fact that article JSON files are located in `client/src/data/articles`. You can hand this to your team to clarify exactly how to implement the Writing Page.

---

## Feature: Writing Page with Medium Articles Integration

### 1. Overview
We want to display our Medium articles on the site without duplicating content. Each article is stored in its own JSON file in the `client/src/data/articles` folder. The Writing Page must display these articles in a single-column format, with pagination and optional search capabilities.

---

### 2. Requirements

1. **Articles Storage**  
   - **Folder Location**: `client/src/data/articles`  
   - **One Article per File**: Each `.json` file contains metadata (and optionally a short excerpt).  
   - **Naming Convention**: Files can be named descriptively, e.g., `programming-revolution.json`, `data-democratization.json`, etc.  

2. **JSON Schema**  
   Each JSON file should contain (at minimum):
   ```json
   {
     "title": "Article Title",
     "url": "https://medium.com/@Username/article-link",
     "author": "AuthorName",
     "publish_date": "MMM DD, YYYY",
     "read_time": "X min read",
     "cover_image": "https://... (optional)",
     "content": "Short excerpt or entire content if needed",
     "scraped_at": "YYYY-MM-DD HH:mm:ss"
   }
   ```
   - `cover_image` is optional. If it exists, we will display it. If missing, display a default placeholder or no image.

3. **Display & Layout**  
   - **Single-Column Layout**, 10 articles per page.  
   - Each article listing shows:  
     - **Title** (linked to `url` on Medium)  
     - **Publish Date**  
     - **Short Excerpt** (e.g., first ~100–150 characters or a provided summary from `content`)  
     - **Cover Image** (if available)  
     - **“Read on Medium”** button or link pointing to `url`  
   - Use **Next** / **Previous** page controls for pagination (or any modern pagination UI component).

4. **Pagination**  
   - Read all `.json` files in `client/src/data/articles`.  
   - (Optional) Sort them by `publish_date` if needed.  
   - Only show **10 articles** per page.  
   - Handle navigation with query parameters (e.g. `?page=1`, `?page=2`) or a similar approach.

5. **Search (Optional Enhancement)**  
   - Implement a **search bar** allowing users to filter articles by `title` or `content`.  
   - Filter the loaded data, then apply the same pagination logic to the filtered list.

6. **Code Structure & Integration**  
   - **Data Reading**: In your React app (assuming `client/` is a React project), you’ll import or dynamically require each JSON file from `client/src/data/articles`.  
   - **State Management**: The aggregated article data can live in a React state (or context) to handle pagination and filtering.  
   - **Pagination / Filtering**: Use a combination of React hooks (e.g., `useState`, `useEffect`) or a custom pagination component to handle slicing the data.  
   - **UI Rendering**:  
     - Title, date, read time, and cover image if provided.  
     - “Read on Medium” link to open the article in a new tab.

7. **Maintenance & Adding New Articles**  
   - **Add**: Each new Medium article requires adding a new `.json` file in `client/src/data/articles`.  
   - **Update**: If you need to revise info or add a `cover_image`, just edit the corresponding JSON file.  
   - **Deploy**: Redeploy the app or refresh the build so new files are recognized.

---

### 3. Acceptance Criteria

- The Writing Page **displays 10 articles** at a time in a single column.  
- Each article shows **title, date, excerpt,** and **cover image** (if provided).  
- Clicking an article’s title or “Read on Medium” button links to the article on Medium.  
- Pagination controls allow browsing through all articles in increments of 10.  
- (Optional) A **search bar** filters articles by title or content, with pagination applied to the filtered results.

---

**This document** clarifies how the Writing Page should handle article data from `client/src/data/articles`, ensuring a scalable, user-friendly interface. If you have any questions or need clarifications, let me know.